type Asset = record {
  id : text;
  url : text;
  created : int;
  content : opt vec vec nat8;
  owner : text;
  chunks_size : nat;
  canister_id : text;
  content_size : nat;
  content_type : text;
  filename : text;
  content_encoding : ContentEncoding;
};
type AssetProperties = record {
  content_type : text;
  filename : text;
  checksum : nat32;
  content_encoding : ContentEncoding;
};
type Asset_ID = text;
type ContentEncoding = variant { GZIP; Identity };
type FileStorage = service {
  assets_list : () -> (Result_3) query;
  chunks_size : () -> (nat) query;
  commit_batch : (text, AssetProperties) -> (Result_2);
  create_chunk : (text, vec nat8, nat) -> (nat);
  delete_asset : (Asset_ID) -> (Result_1);
  get : (Asset_ID) -> (Result) query;
  get_health : () -> (Health) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  http_request_streaming_callback : (StreamingCallbackToken) -> (
      StreamingCallbackHttpResponse,
    ) query;
  is_full : () -> (bool) query;
  start_clear_expired_chunks : () -> (TimerId);
  stop_clear_expired_chunks : () -> (TimerId);
  version : () -> (nat) query;
};
type HeaderField = record { text; text };
type Health = record {
  assets_size : int;
  heap_mb : int;
  memory_mb : int;
  cycles : int;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec HeaderField;
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec HeaderField;
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type Result = variant { ok : Asset; err : text };
type Result_1 = variant { ok : text; err : text };
type Result_2 = variant { ok : Asset_ID; err : text };
type Result_3 = variant { ok : vec Asset; err : text };
type StreamingCallbackHttpResponse = record {
  token : opt StreamingCallbackToken;
  body : vec nat8;
};
type StreamingCallbackToken = record {
  chunk_index : nat;
  asset_id : text;
  content_encoding : text;
};
type StreamingStrategy = variant {
  Callback : record {
    token : StreamingCallbackToken;
    callback : func () -> ();
  };
};
type TimerId = nat;
service : (bool) -> FileStorage